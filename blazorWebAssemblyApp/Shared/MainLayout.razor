@inherits LayoutComponentBase

@inject ProfileService ProfileService
@inject SessionService SessionService

@using PokeApiNet

<MudThemeProvider @ref="@Globals.MudThemeProvider" @bind-IsDarkMode="@isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/Swepps/pokemonautoteambuilder" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Elevation="1">
        <NavMenu />
        <MudSwitch @bind-Checked="@IsDarkMode" Color="Color.Primary" Class="ma-4 object-bottom" T="bool" Label="Toggle Light/Dark Mode" />
    </MudDrawer>
    <MudMainContent Class="pt-16 px-2 mud-height-full">
        <MudContainer Class="mt-6" MaxWidth="MaxWidth.ExtraLarge">
            @if (state == Init.Done)
            {            
                @Body
            }
            else if (state == Init.Initialising)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" Class="mt-8 mb-8" Size="Size.Large" />
            }
            else
            {
                <MudText Typo="Typo.body1" Color="Color.Error">Error initialising app. Please report on GitHub.</MudText>
            }
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{
    enum Init { Initialising, Done, Error }

    Init state = Init.Initialising;

    // theme stuff
    private bool isDarkMode;
    private bool IsDarkMode
    {
        get { return isDarkMode; }
        set
        {
            isDarkMode = value;
            OnChangeDarkMode();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // initialising global variables used across the app
            var getPreferencesTask = ProfileService.GetPreferencesAsync();
            var getUserDataTask = ProfileService.GetUserDataAsync();
            var getSessionDataTask = SessionService.GetSessionData();
            var getNationalDexTask = PokeApiHandler.GetNationalDex();

            await Task.WhenAll(getPreferencesTask, getUserDataTask, getSessionDataTask, getNationalDexTask);

            isDarkMode = getPreferencesTask.Result.DarkMode;
            Globals.NationalDex = getNationalDexTask.Result;
            SessionData session = getSessionDataTask.Result;

            // check for any team already in the session data and use it to
            // load the global team
            var getTeamTasks = session.CurrentTeam.Select(async (name, index) =>
            {
                if (!string.IsNullOrEmpty(name))
                {
                    SmartPokemon? sp = await PokeApiHandler.GetPokemonAsync(name);
                    if (sp is not null)
                        Globals.PokemonTeam[index] = sp;
                }
            });
            await Task.WhenAll(getTeamTasks);

            if (Globals.NationalDex != null)
            {
                state = Init.Done;
            }
            else
            {
                // uh oh
                state = Init.Error;

            }

            StateHasChanged();
        }
    }

    void OnChangeDarkMode()
    {
        ProfileService?.SetDarkMode(IsDarkMode);
    }

    // nav menu
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }
}
