@using PokeApiNet
@using PokeAutobuilder.Source.Services;
@using PokeAutobuilder.Shared;
@using PokemonDataModel
@using Utility

@inject SessionService Session
@inject ProfileService Profile
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PokeApiService PokeApi

@implements IDisposable

@page "/"

<PageTitle>Team Builder</PageTitle>

<MudStack Spacing="5" Class="mt-4 mb-4" AlignItems="AlignItems.Center">
    <MudGrid Justify="Justify.FlexEnd">
        <MudItem xs="12" sm="6" Class="d-flex align-end justify-start mud-width-full">
            <MudSelect T="ILazyPokemonList" Label="Search Location" AnchorOrigin="Origin.TopCenter"
                       @bind-Value="SearchLocation">
                @foreach (ILazyPokemonList list in _searchLocations)
                {
                    <MudSelectItem T="ILazyPokemonList" Value="list">
                        @list.Name
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" Class="d-flex align-end justify-center mud-width-full">
            <MudTextField @bind-Value="_teamName" Label="Team Name" Variant="Variant.Text"></MudTextField>
            <MudButton Disabled="@(Session.Team.IsEmpty)" OnClick="OnClickAddTeamToStorage" Color="Color.Info" StartIcon="@Icons.Material.Filled.Save" Size="Size.Medium" Variant="Variant.Filled" Class="ml-4">Save</MudButton>
        </MudItem>
    </MudGrid>
    <MudGrid Justify="Justify.SpaceEvenly">
        @for (int i = 0; i < PokemonTeam.MaxTeamSize; i++)
        {
            <MudItem xs="6" sm="4" lg="2">
                <PokemonSearchBox @ref="tempCard" SearchFunc="SearchAsync" OnPokemonChanged="PokemonSearchBoxUpdatedAsync" >
                    <ExtraButtons>
@*                         <MudTooltip Text="Randomize">
                            <MudIconButton Disabled="Locked" Size="Size.Small" Icon="@Icons.Material.Filled.Loop" OnClick="OnClickRandomize"></MudIconButton>
                        </MudTooltip> *@
                    </ExtraButtons>
                </PokemonSearchBox>
            </MudItem>
        }
    </MudGrid>
    @if (Profile.PokemonStorage.Pokemon.Count < 7 || GetLockedMembers().CountPokemon() >= PokemonTeam.MaxTeamSize - 1)
    {
        <MudTooltip Text="@GetAutoBuilderTooltipMessage()">
            <MudButton Disabled="true" OnClick="OnClickAutoBuilder" Color="Color.Primary" StartIcon="@Icons.Material.Filled.SmartToy" Size="Size.Large" Variant="Variant.Filled" Style="max-width: 500px;">Auto Builder</MudButton>
        </MudTooltip>
    }
    else
    {
        <MudButton OnClick="OnClickAutoBuilder" Color="Color.Primary" StartIcon="@Icons.Material.Filled.SmartToy" Size="Size.Large" Variant="Variant.Filled" Style="max-width: 500px;">Auto Builder</MudButton>
    }
    <MudDivider DividerType="DividerType.FullWidth" />
    <MudText Typo="Typo.h6">Pokémon Team Stats</MudText>
    <div style="width: 100%; text-align: center;">
        @if (!Session.Team.IsEmpty)
        {
            <StatsTeamPanel Team="Session.Team"/>
        }
        else
        {
            <MudText Typo="Typo.caption">Add at least one Pokémon to your team to see stats.</MudText>
        }
    </div>
</MudStack>
<PageFooter />

@code {
    private string _teamName { get; set; } = "";

    List<PokemonSearchBox> cards = [];
    PokemonSearchBox tempCard
    {
        set { cards.Add(value); }
    }

    private List<ILazyPokemonList> _searchLocations = new();
    ILazyPokemonList? _searchLocation;
    ILazyPokemonList? SearchLocation
    {
        get => _searchLocation;
        set
        {
            _searchLocation = value;
            if (value is not null)
            {
                _ = Session.SetSearchLocationAsync(value.Name);
            }
        }
    }    

    public async void OnClickAddTeamToStorage()
    {
        Session.Team.Name = _teamName;
        await Profile.AddTeamToStorageAsync(Session.Team);

        Snackbar.Add("Added team '" + Session.Team.Name + "' to Team Storage", Severity.Success);
    }

    public PokemonTeam GetLockedMembers()
    {
        // build a team containing the locked members
        PokemonTeam lockedMembers = new PokemonTeam();

        if (cards.Count == 0)
            return lockedMembers;

        for (int i = 0; i < PokemonTeam.MaxTeamSize; i++)
        {
            if (cards[i]!.Locked)
                lockedMembers.Pokemon[i] = cards[i]!.Pokemon;
        }
        return lockedMembers;
    }

    public string GetAutoBuilderTooltipMessage()
    {
        if (Profile.PokemonStorage.Pokemon.Count < 7)
            return "Please fill Pokémon storage with at least 7 Pokémon before using the Auto Builder";

        if (GetLockedMembers().CountPokemon() >= PokemonTeam.MaxTeamSize - 1)
            return "Please unlock some more Pokémon before using the Auto Builder";

        return "";
    }

    public async Task OnClickAutoBuilder()
    {
        var parameters = new DialogParameters();
        parameters.Add("LockedMembers", GetLockedMembers());


        var dialog = await DialogService.ShowAsync<AutoBuilderDialog>("Automatic Team Builder", parameters);
        var result = await dialog.Result;

        _teamName = Session.Team.Name;
        StateHasChanged();
    }

    public void SetSelectedPokemon()
    {
        if (cards.Count != PokemonTeam.MaxTeamSize)
            return;

        bool anyPokemonChanged = false;
        for (int i = 0; i < PokemonTeam.MaxTeamSize; i++)
        {
            if (cards[i].Pokemon != Session.Team.Pokemon[i])
            {
                cards[i].Pokemon = Session.Team.Pokemon[i];
                anyPokemonChanged = true;
            }
        }

        if (anyPokemonChanged)
            StateHasChanged();
    }

    protected async Task<IEnumerable<IPokemonSearchable>> SearchAsync(string? searchString)
    {
        if (_searchLocation is not null)
        {
            IEnumerable<IPokemonSearchable> list = await _searchLocation.GetListAsync();
            if (String.IsNullOrEmpty(searchString))
                return list;

            return list.Where((p) => p.Name.ToLower().Contains(searchString.ToLower()));
        }

        return Enumerable.Empty<SmartPokemonEntry>();
    }

    protected async Task PokemonSearchBoxUpdatedAsync(PokemonSearchBox card)
    {
        int teamIndex = cards.IndexOf(card);
        if (teamIndex >= 0 && teamIndex < PokemonTeam.MaxTeamSize)
        {
            if (Session.Team.Pokemon[teamIndex] != card.Pokemon)
            {
                // this function call will trigger OnTeamChanged event
                await Session.SetTeamPokemonAsync(teamIndex, card.Pokemon);
            }
        }
    }

    protected override void OnInitialized()
    {        
        // register interest in session changing to update this page
        Session.OnTeamChange += SetSelectedPokemon;

        _searchLocations.Add(new SmartPokedex("National Pokédex", new NamedApiResource<Pokedex> { Name = "national", Url = "https://pokeapi.co/api/v2/pokedex/1/" }));
        _searchLocations.Add(Profile.PokemonStorage);
        _searchLocations.Add(new SmartPokedex("Red & Blue", new NamedApiResource<VersionGroup> { Name = "red-blue", Url = "https://pokeapi.co/api/v2/version-group/1/" }));
        _searchLocations.Add(new SmartPokedex("Yellow", new NamedApiResource<VersionGroup> { Name = "yellow", Url = "https://pokeapi.co/api/v2/version-group/2/" }));
        _searchLocations.Add(new SmartPokedex("Gold & Silver", new NamedApiResource<VersionGroup> { Name = "gold-silver", Url = "https://pokeapi.co/api/v2/version-group/3/" }));
        _searchLocations.Add(new SmartPokedex("Crystal", new NamedApiResource<VersionGroup> { Name = "crystal", Url = "https://pokeapi.co/api/v2/version-group/4/" }));
        _searchLocations.Add(new SmartPokedex("Ruby & Sapphire", new NamedApiResource<VersionGroup> { Name = "ruby-sapphire", Url = "https://pokeapi.co/api/v2/version-group/5/" }));
        _searchLocations.Add(new SmartPokedex("Emerald", new NamedApiResource<VersionGroup> { Name = "emerald", Url = "https://pokeapi.co/api/v2/version-group/6/" }));
        _searchLocations.Add(new SmartPokedex("FireRed & LeafGreen", new NamedApiResource<VersionGroup> { Name = "firered-leafgreen", Url = "https://pokeapi.co/api/v2/version-group/7/" }));
        _searchLocations.Add(new SmartPokedex("Diamond & Pearl", new NamedApiResource<VersionGroup> { Name = "diamond-pearl", Url = "https://pokeapi.co/api/v2/version-group/8/" }));
        _searchLocations.Add(new SmartPokedex("Platinum", new NamedApiResource<VersionGroup> { Name = "platinum", Url = "https://pokeapi.co/api/v2/version-group/9/" }));
        _searchLocations.Add(new SmartPokedex("HeartGold & SoulSilver", new NamedApiResource<VersionGroup> { Name = "heartgold-soulsilver", Url = "https://pokeapi.co/api/v2/version-group/10/" }));
        _searchLocations.Add(new SmartPokedex("Black & White", new NamedApiResource<VersionGroup> { Name = "black-white", Url = "https://pokeapi.co/api/v2/version-group/11/" }));
        _searchLocations.Add(new SmartPokedex("Colosseum", new NamedApiResource<VersionGroup> { Name = "colosseum", Url = "https://pokeapi.co/api/v2/version-group/12/" }));
        _searchLocations.Add(new SmartPokedex("Black 2 & White 2", new NamedApiResource<VersionGroup> { Name = "black-2-white-2", Url = "https://pokeapi.co/api/v2/version-group/14/" }));
        _searchLocations.Add(new SmartPokedex("X & Y", new NamedApiResource<VersionGroup> { Name = "x-y", Url = "https://pokeapi.co/api/v2/version-group/15/" }));
        _searchLocations.Add(new SmartPokedex("Omega Ruby & Alpha Sapphire", new NamedApiResource<VersionGroup> { Name = "omega-ruby-alpha-sapphire", Url = "https://pokeapi.co/api/v2/version-group/16/" }));
        _searchLocations.Add(new SmartPokedex("Sun & Moon", new NamedApiResource<VersionGroup> { Name = "sun-moon", Url = "https://pokeapi.co/api/v2/version-group/17/" }));
        _searchLocations.Add(new SmartPokedex("Ultra Sun & Ultra Moon", new NamedApiResource<VersionGroup> { Name = "ultra-sun-ultra-moon", Url = "https://pokeapi.co/api/v2/version-group/18/" }));
        _searchLocations.Add(new SmartPokedex("Let's Go, Pikachu! & Let's Go, Eevee!", new NamedApiResource<VersionGroup> { Name = "lets-go-pikachu-lets-go-eevee", Url = "https://pokeapi.co/api/v2/version-group/19/" }));
        _searchLocations.Add(new SmartPokedex("Sword & Shield", new NamedApiResource<VersionGroup> { Name = "sword-shield", Url = "https://pokeapi.co/api/v2/version-group/20/" }));
        _searchLocations.Add(new SmartPokedex("The Isle of Armor", new NamedApiResource<VersionGroup> { Name = "the-isle-of-armor", Url = "https://pokeapi.co/api/v2/version-group/21/" }));
        _searchLocations.Add(new SmartPokedex("The Crown Tundra", new NamedApiResource<VersionGroup> { Name = "the-crown-tundra", Url = "https://pokeapi.co/api/v2/version-group/22/" }));
        _searchLocations.Add(new SmartPokedex("Brilliant Diamond and Shining Pearl", new NamedApiResource<VersionGroup> { Name = "brilliant-diamond-and-shining-pearl", Url = "https://pokeapi.co/api/v2/version-group/23/" }));
        _searchLocations.Add(new SmartPokedex("Legends: Arceus", new NamedApiResource<VersionGroup> { Name = "legends-arceus", Url = "https://pokeapi.co/api/v2/version-group/24/" }));
        _searchLocations.Add(new SmartPokedex("Scarlet & Violet", new NamedApiResource<VersionGroup> { Name = "scarlet-violet", Url = "https://pokeapi.co/api/v2/version-group/25/" }));
        _searchLocations.Add(new SmartPokedex("The Teal Mask", new NamedApiResource<VersionGroup> { Name = "the-teal-mask", Url = "https://pokeapi.co/api/v2/version-group/26/" }));
        _searchLocations.Add(new SmartPokedex("The Indigo Disk", new NamedApiResource<VersionGroup> { Name = "the-indigo-disk", Url = "https://pokeapi.co/api/v2/version-group/27/" }));


        _teamName = Session.Team.Name;
        _searchLocation = _searchLocations.Where((s) => s.Name.Equals(Session.SearchLocation)).FirstOrDefault();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        SetSelectedPokemon();
    }

    public void Dispose()
    {
        Session.OnTeamChange -= SetSelectedPokemon;
    }
}
