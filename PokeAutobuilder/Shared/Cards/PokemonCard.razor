@inject IDialogService DialogService

@using PokeApiNet
@using PokeAutobuilder.Source.Services;
@using PokemonDataModel;
@using Utility

@using Type = PokeApiNet.Type

@if (Pokemon is not null && _generation is not null)
{
    <MudStack AlignItems="AlignItems.Center" Spacing="1">
        <MudImage Fluid="true" Src="@Pokemon.Sprites.Other.OfficialArtwork.FrontDefault" alt="@Pokemon.Name" title="@Pokemon.Name" Style="-webkit-filter: drop-shadow(5px 5px 5px #222); filter: drop-shadow(5px 5px 5px #222);" />
        <MudStack Row="true" Class="pa-2">
            @foreach (PokemonType t in Pokemon.Types)
            {
                <MudImage Src="@StringUtils.TypeImgFromName(t.Type.Name)" alt="@t.Type.Name" title="@t.Type.Name" Width="50"/>
            }
        </MudStack>
        @if (IsNameDisplayed)
        {
            <MudText Typo="Typo.button" Align="Align.Center">@Pokemon.Name</MudText>
        }
        <MudText Typo="Typo.caption">@_generation.Names.Where(name => name.Language.Name == Globals.Language).FirstOrDefault()?.Name</MudText>
    </MudStack>
}
else
{
    <MudSkeleton Height="100%" Width="100%" SkeletonType="SkeletonType.Rectangle" />
}

@code {
    [Parameter, EditorRequired]
    public SmartPokemon? Pokemon { get; set; }

    [Parameter]
    public bool IsNameDisplayed { get; set; } = true;

    private Generation? _generation;

    protected override async Task OnParametersSetAsync()
    {
        _generation = null;
        if (Pokemon is not null)
        {
            _generation = await Pokemon.GetGenerationAsync();
            StateHasChanged();
        }
    }
}
