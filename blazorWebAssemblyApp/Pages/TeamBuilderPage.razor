@inject SessionService SessionService
@inject ProfileService ProfileService

@page "/"
@using PokeApiNet

<PageTitle>Team Builder</PageTitle>

@if (Team is not null)
{
    <MudStack Spacing="5" Class="mt-4 mb-4">
        <MudRadioGroup @bind-SelectedOption="@PokemonSearchLocation">
            <MudRadio Option="@SearchLocation.NationalPokedex" Color="Color.Primary">National Pokédex</MudRadio>
            <MudRadio Option="@SearchLocation.PokemonStorage" Color="Color.Primary">Pokémon Storage</MudRadio>
        </MudRadioGroup>
        @if (!Team.IsEmpty)
        {
            <MudTextField @bind-Value="TeamName" Label="Team Name" Variant="Variant.Outlined"></MudTextField>
            <MudButton OnClick="OnClickAddTeamToStorage" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small">Add Team To Storage</MudButton>
        }
        <MudGrid Justify="Justify.SpaceEvenly">
            @for (int i = 0; i < PokemonTeam.MaxTeamSize; i++)
            {
                int index = i;
                <MudItem xs="6" sm="4" lg="2"><PokemonCard @ref="tempCard" OnUpdated="Update" Team="@Team" PokemonTeamIndex="index" UseStorage="@(PokemonSearchLocation == SearchLocation.PokemonStorage)" /></MudItem>
            }
        </MudGrid>
        <MudDivider DividerType="DividerType.Middle" />
        <MudText Typo="Typo.h6">Pokémon Stats</MudText>
        @if (!Team.IsEmpty)
        {
            <MudTabs Elevation="4" Border="true" Centered="true" Rounded="true" Position="Position.Top" ApplyEffectsToContainer="true">
                @foreach (SmartPokemon? p in Team)
                {
                    @if (p != null)
                    {
                        <MudTabPanel Style="min-width: 50px;">
                            <TabContent>
                                <MudImage Src="@p.Sprites.FrontDefault" Height="50"/>
                            </TabContent>
                            <TabWrapperContent>
                                <MudTooltip Text="@StringUtils.FirstCharToUpper(p.Name)" >
                                    @context
                                </MudTooltip>
                            </TabWrapperContent>
                            <ChildContent>
                                <StatsPanel Pokemon="p" />
                            </ChildContent>
                        </MudTabPanel>
                    }
                }
            </MudTabs>        <MudDivider DividerType="DividerType.Middle" />        <MudText Typo="Typo.h6">Team Stats</MudText>
            <StatsTeamPanel Team="@Team" />
        }
        else
        {
            <MudText Typo="Typo.caption">Add at least one Pokémon to your team to see their stats.</MudText>
        }
    </MudStack>
}

@code {
    PokemonTeam? Team = null;

    List<PokemonCard?> cards = new List<PokemonCard?>();
    PokemonCard? tempCard
    {
        set { cards.Add(value); }
    }

    public enum SearchLocation
    {
        NationalPokedex = 0,
        PokemonStorage = 1
    };
    private SearchLocation pokemonSearchLocation = SearchLocation.NationalPokedex;
    public SearchLocation PokemonSearchLocation
    {
        get { return pokemonSearchLocation; }
        set
        {
            pokemonSearchLocation = value;

            // need to clear team of pokemon not in the storage
            if (pokemonSearchLocation == SearchLocation.PokemonStorage)
            {
                for (int i = 0; i < PokemonTeam.MaxTeamSize; i++)
                {
                    SmartPokemon? p = Globals.PokemonTeam[i];
                    if (p is not null && !Globals.PokemonStorage.Contains(p))
                    {
                        Globals.PokemonTeam[i] = null;
                        cards[i]!.Pokemon = null;
                    }
                }
            }

            Update();
        }
    }

    public string TeamName { get; set; } = "";

    // when component is initialised
    protected override async Task OnInitializedAsync()
    {
        SessionData session = await SessionService.GetSessionDataAsync();
        PokemonSearchLocation = (SearchLocation)session.PokemonSearchLocation;
        Team = await session.GlobalTeam.GetPokemonTeam();
    }

    private async void Update()
    {
        StateHasChanged();
        await SessionService.SetPokemonSearchLocationAsync((int)pokemonSearchLocation);
        if (Team is not null)
            await SessionService.SetGlobalTeam(Team);
    }

    public async void OnClickAddTeamToStorage()
    {
        Team!.Name = TeamName;
        await ProfileService.AddTeam(Team!);
    }
}
