@using PokeApiNet
@using Type = PokeApiNet.Type
@using pokeAutoBuilder.Shared.Cards
@using pokeAutoBuilder.Source.Services;
@using static pokeAutoBuilder.Pages.TeamBuilderPage

@inject ProfileService Profile
@inject SessionService Session
@inject PokeApiService PokeApiService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Elevation="4" Class="d-flex flex-column align-center justify-center mud-width-full pa-2">

    @if (!NeverUseStorage && Session.SearchLocation == SearchLocation.PokemonStorage)
    {
        <MudAutocomplete T="SmartPokemon" Label="Pokémon" @bind-Value="_Pokemon" SearchFunc="@SearchStorage"
                         ResetValueOnEmptyText="true" Disabled="_Locked"
                         CoerceText="true" CoerceValue="false" MaxItems="null" />
    }
    else
    {
        <MudAutocomplete T="SmartPokemonEntry" Label="Pokémon" @bind-Value="_PokemonSearchValue" SearchFunc="@SearchPokedex"
                         ResetValueOnEmptyText="true" Disabled="_Locked" MaxItems="50"
                         CoerceText="true" CoerceValue="false">
            <MoreItemsTemplate>
                <MudText Align="Align.Center" Typo="Typo.caption">
                    Only the first 50 Pokémon are shown...
                </MudText>
            </MoreItemsTemplate>
        </MudAutocomplete>
    }

    <div style="height: 50px">
        @if (_pokemonSearchValueVarieties.Count > 1)
        {
            <MudSelect Dense="true" T="string" Label="Form" AnchorOrigin="Origin.TopCenter"
                       @bind-Value="_PokemonFormName">
                @foreach (var v in _pokemonSearchValueVarieties)
                {
                    <MudSelectItem Value="@v.Name" />
                }
            </MudSelect>
        }
    </div>
    @if (_pokemon is not null)
    {
        <PokemonCard Pokemon="_pokemon" IsNameDisplayed="false" />
        @if (PokemonTeamIndex >= 0 && PokemonTeamIndex < PokemonTeam.MaxTeamSize)
        {
            <MudToggleIconButton @bind-Toggled="@_Locked"
                                 Icon="@Icons.Material.Filled.LockOpen" Color="@Color.Dark"
                                 ToggledIcon="@Icons.Material.Filled.Lock" ToggledColor="@Color.Primary" />
        }
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudTooltip Text="Details">
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.OpenInFull" OnClick="OnClickDetails"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Add To Storage">
                <MudIconButton Disabled="@((!NeverUseStorage && Session.SearchLocation == SearchLocation.PokemonStorage) || Profile.PokemonStorage.Pokemon.Contains(_pokemon))"
                Size="Size.Small" Icon="@Icons.Material.Filled.Save" OnClick="OnClickAddToStorage"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Randomize">
                <MudIconButton Disabled="_Locked" Size="Size.Small" Icon="@Icons.Material.Filled.Loop" OnClick="OnClickRandomize"></MudIconButton>
            </MudTooltip>
        </MudButtonGroup>
    }
    else if (_PokemonSearchValue is not null)
    {
        if (_errorFetchingPokemon)
        {
            <MudText Typo="Typo.caption">
                Error Fetching @_PokemonSearchValue.Name
                from API
            </MudText>
        }
        else
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" Class="mt-8 mb-8" />
        }        
    }
    else
    {
        
    }

</MudPaper>

@code {
    // if the card has a reference team it needs to know its position within the team using this index
    [Parameter]
    public int PokemonTeamIndex { get; set; } = -1;

    [Parameter]
    public EventCallback OnPokemonChanged { get; set; }

    [Parameter]
    public bool NeverUseStorage { get; set; } = false;

    // currently selected pokemon
    private SmartPokemon? _pokemon;
    public SmartPokemon? _Pokemon
    {
        get => _pokemon;
        set
        {
            _ = SetPokemon(value);
        }
    }
    private SmartPokemon? _prevPokemon;

    private List<NamedApiResource<Pokemon>> _pokemonSearchValueVarieties = new();
    private bool _pokemonSearchValueVarietiesChanged = true;

    private SearchLocation _prevPokemonSearchLocation;

    // the string which holds the last valid search result from the search bar
    private SmartPokemonEntry? _pokemonSearchValue;
    public SmartPokemonEntry? _PokemonSearchValue { 
        get { return _pokemonSearchValue; }
        set 
        {
            _pokemonSearchValue = value;
            _ = OnUpdatedSearchValue();
        }
    }
    private SmartPokemonEntry? _prevPokemonSearchValue;

    // the string used in the form selector
    private string? _pokemonFormName;
    public string? _PokemonFormName
    {

        get { return _pokemonFormName; }
        set
        {
            _pokemonFormName = value;
            _ = OnUpdatedPokemonForm();
        }
    }
    private string? _prevPokemonFormName;

    // only relevant if this search box is part of a team
    private bool _locked = false;
    public bool _Locked
    {
        get { return _locked; }
        set
        {
            _locked = value;
        }
    }

    private bool _errorFetchingPokemon = false;

    public void Refresh()
    {
        StateHasChanged();
    }

    // pokemon search functionality
    private async Task<IEnumerable<SmartPokemonEntry>> SearchPokedex(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return Session.NationalDex;

        // search the pokedex in a background thread
        return await Task.Run(() => Session.NationalDex.SearchPokedex(value.ToLower()));
    }

    private async Task<IEnumerable<SmartPokemon>> SearchStorage(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return Profile.PokemonStorage.Pokemon;

        // search the storage in a background thread
        return await Task.Run(() => Profile.PokemonStorage.Pokemon.Where(p => p.Name.Contains(value.ToLower())).OrderBy(p => p.Name));
    }

    public async Task OnUpdatedPokemonForm()
    {        
        // don't bother if the form name is the same as the current pokemon
        if (_PokemonFormName is null || (_Pokemon != null && _PokemonFormName == _Pokemon.Name))
            return;

        string form = _PokemonFormName;
        await SearchPokemon(null);
        await SearchPokemon(form);
    }

    public async Task OnUpdatedSearchValue()
    {
        if (_PokemonSearchValue is not null)
        {
            _pokemonSearchValueVarieties = await _PokemonSearchValue.GetAllVarieties();
            await SearchPokemon(_pokemonSearchValueVarieties[0].Name);
        }
        else
        {
            await SearchPokemon(null);
        }
    }

    public async Task SearchPokemon(string? pokemonName)
    {
        SmartPokemon? before = _pokemon;

        _errorFetchingPokemon = false;

        // clear pokemon
        if (pokemonName is null)
        {
            _pokemon = null;
            _pokemonFormName = null;
            _pokemonSearchValueVarieties.Clear();
        }
        else
        {
            SmartPokemon? searchedPokemon = await PokeApiService.GetPokemonAsync(pokemonName);
            if (searchedPokemon is not null)
                await SetPokemon(searchedPokemon);
            else
                _errorFetchingPokemon = true;
        }

        if (Session.Team is not null && PokemonTeamIndex >= 0 && PokemonTeamIndex < PokemonTeam.MaxTeamSize)
        {
            // this function call will trigger OnTeamChanged event
            await Session.SetTeamPokemonAsync(PokemonTeamIndex, _Pokemon);
        }

        if (before != _pokemon)
        {
            _ = OnPokemonChanged.InvokeAsync();
        }

        StateHasChanged();
    }

    public async Task SetPokemon(SmartPokemon? pokemon)
    {
        _pokemon = pokemon;
        if (_pokemon is not null)
        {
            _pokemonSearchValue = Session.NationalDex.FindPokemon(_pokemon.Species.Name);
            _pokemonFormName = _pokemon.Name;
            _pokemonSearchValueVarieties.Clear();
            PokemonSpecies species = await _pokemon.GetSpeciesAsync();
            foreach (PokemonSpeciesVariety variety in species.Varieties)
            {
                _pokemonSearchValueVarieties.Add(variety.Pokemon);
            }
        }
        else
        {
            _pokemonSearchValue = null;
            _pokemonFormName = null;
            _pokemonSearchValueVarieties.Clear();
        }
    }

    // pokemon ability functionality
    public void OnChangeAbility(string? value)
    {
        // SetChosenAbility uses a string to find an ability with a matching name
        if (value is not null && _pokemon is not null)
            _pokemon.SelectAbility(value);
    }

    public async Task OnClickAddToStorage()
    {
        if (_pokemon is null)
            return;

        await Profile.AddPokemonToStorageAsync(_pokemon);

        Snackbar.Add("Added " + _pokemon.Name + " to Pokémon Storage", Severity.Success);
    }

    public async Task OnClickDetails()
    {
        var parameters = new DialogParameters();
        parameters.Add("Pokemon", _Pokemon);

        var dialog = await DialogService.ShowAsync<PokemonDetailsDialog>(StringUtils.FirstCharToUpper(_Pokemon!.Name), parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SmartPokemon)
        {
            // replace old pokemon with updated version
            SmartPokemon? pokemon = result.Data as SmartPokemon;
            if (pokemon is not null)
            {
                // add and remove pokemon from storage to "update" it
                // we can directly remove it here because it's about to be updated
                // properly by AddPokemonToStorageAsync anyway
                if (Profile.PokemonStorage.Pokemon.Remove(pokemon))
                    await Profile.AddPokemonToStorageAsync(pokemon);
                _Pokemon = pokemon;
            }
            StateHasChanged();
        }
    }

    public async Task OnClickRandomize()
    {
        await SearchPokemon(null);

        _pokemonSearchValue = Session.NationalDex.RandomPokemon();

        if (_pokemonSearchValue != null)
        {            
            _pokemonSearchValueVarieties = await _pokemonSearchValue.GetAllVarieties();
            Random rand = new Random();
            await SearchPokemon(_pokemonSearchValueVarieties[rand.Next(_pokemonSearchValueVarieties.Count)].Name);
        }
    }

    protected override void OnInitialized()
    {
        Session.OnSearchLocationChange += StateHasChanged;
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PokemonTeamIndex >= 0 && PokemonTeamIndex < PokemonTeam.MaxTeamSize)
        {
            await SetPokemon(Session.Team.Pokemon[PokemonTeamIndex]);
        }

        base.OnParametersSet();
    }

    protected override bool ShouldRender()
    {
        return _prevPokemon != _pokemon ||
        _prevPokemonSearchValue != _pokemonSearchValue ||
        _prevPokemonFormName != _pokemonFormName ||
        _pokemonSearchValueVarietiesChanged ||
        _prevPokemonSearchLocation != Session.SearchLocation;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _prevPokemon = _pokemon;
        _prevPokemonSearchValue = _pokemonSearchValue;
        _prevPokemonFormName = _pokemonFormName;
        _prevPokemonSearchLocation = Session.SearchLocation;
        _pokemonSearchValueVarietiesChanged = false;
    }
}
