@inject SessionService SessionService
@inject ProfileService ProfileService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@page "/"
@using PokeApiNet
@using pokeAutoBuilder.Source.Services;

<PageTitle>Team Builder</PageTitle>

@if (Team is not null)
{
    <MudStack Spacing="5" Class="mt-4 mb-4" AlignItems="AlignItems.Center">
        <MudGrid Justify="Justify.FlexEnd" >
            <MudItem xs="12" sm="6" Class="d-flex align-end justify-start mud-width-full">
                <MudRadioGroup @bind-SelectedOption="@PokemonSearchLocation">
                    <MudRadio Option="@SearchLocation.NationalPokedex" Color="Color.Primary">National Pokédex</MudRadio>
                    <MudRadio Option="@SearchLocation.PokemonStorage" Color="Color.Primary">Pokémon Storage</MudRadio>
                </MudRadioGroup>
            </MudItem>
            <MudItem xs="12" sm="6" Class="d-flex align-end justify-center mud-width-full" >
                <MudTextField @bind-Value="TeamName" Label="Team Name" Variant="Variant.Text"></MudTextField>
                <MudButton Disabled="@(Team!.IsEmpty)" OnClick="OnClickAddTeamToStorage" Color="Color.Info" StartIcon="@Icons.Material.Filled.Save" Size="Size.Medium" Variant="Variant.Filled" Class="ml-4">Save</MudButton>
            </MudItem>
        </MudGrid>
        <MudGrid Justify="Justify.SpaceEvenly">
            @for (int i = 0; i < PokemonTeam.MaxTeamSize; i++)
            {
                int index = i;
                <MudItem xs="6" sm="4" lg="2"><PokemonSearchBox @ref="tempCard" OnUpdated="Update" Team="@Team" PokemonTeamIndex="index" UseStorage="@(PokemonSearchLocation == SearchLocation.PokemonStorage)" /></MudItem>
            }
        </MudGrid>
        <MudButton OnClick="OnClickAutoBuilder" Color="Color.Primary" StartIcon="@Icons.Material.Filled.SmartToy" Size="Size.Large" Variant="Variant.Filled" Style="max-width: 500px;">Auto Builder</MudButton>
        <MudDivider DividerType="DividerType.FullWidth" />
        <MudText Typo="Typo.h6">Pokémon Team Stats</MudText>
        @if (!Team.IsEmpty)
        {
            <StatsTeamPanel Team="@Team" />
        }
        else
        {
            <MudText Typo="Typo.caption">Add at least one Pokémon to your team to see stats.</MudText>
        }
    </MudStack>
}

@code {
    PokemonTeam? Team;

    List<PokemonSearchBox?> cards = new List<PokemonSearchBox?>();
    PokemonSearchBox? tempCard
    {
        set { cards.Add(value); }
    }

    public enum SearchLocation
    {
        NationalPokedex = 0,
        PokemonStorage = 1
    };
    private SearchLocation pokemonSearchLocation = SearchLocation.NationalPokedex;
    public SearchLocation PokemonSearchLocation
    {
        get { return pokemonSearchLocation; }
        set
        {
            pokemonSearchLocation = value;

            // need to clear team of pokemon not in the storage
            if (pokemonSearchLocation == SearchLocation.PokemonStorage)
            {
                for (int i = 0; i < PokemonTeam.MaxTeamSize; i++)
                {
                    SmartPokemon? p = Globals.PokemonTeam[i];
                    if (p is not null && !Globals.PokemonStorage.Contains(p))
                    {
                        Globals.PokemonTeam[i] = null;
                        cards[i]!.Pokemon = null;
                    }
                }
            }

            Update();
        }
    }

    public string TeamName { get; set; } = "";

    // when component is initialised
    protected override async Task OnInitializedAsync()
    {
        SessionData session = await SessionService.GetSessionDataAsync();
        PokemonSearchLocation = (SearchLocation)session.PokemonSearchLocation;
        Team = await session.GlobalTeam.GetPokemonTeam();
        TeamName = Team.Name;
    }

    private async void Update()
    {
        StateHasChanged();
        await SessionService.SetPokemonSearchLocationAsync((int)pokemonSearchLocation);
        if (Team is not null)
        {
            Team.Name = TeamName;
            await SessionService.SetGlobalTeam(Team);
        }
    }

    public async void OnClickAddTeamToStorage()
    {
        Team!.Name = TeamName;
        await ProfileService.AddTeam(Team!);

        Snackbar.Add("Added team '" + Team!.Name + "' to Team Storage", Severity.Success);
    }

    public void OnClickAutoBuilder()
    {
        var parameters = new DialogParameters();
        //parameters.Add("Pokemon", Pokemon);

        DialogService.Show<AutoBuilderDialog>("Automatic Team Builder", parameters);
    }
}
