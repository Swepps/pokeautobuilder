name: Deploy to GitHub Pages

permissions:
  contents: write

# Run workflow on every push to the master branch
on:
  push:
    branches: [ dev ]

env:
  WWWROOT_DIR: release/wwwroot
# WWWROOT_DIR: PokeAutobuilder/bin/Release/net8.0/wwwroot
    
jobs:
  deploy-to-github-pages:
    # use ubuntu-latest image to run steps on
    runs-on: ubuntu-latest
    steps:
      # uses GitHub's checkout action to checkout code form the master branch
      - uses: actions/checkout@v4
      
      # sets up .NET Core SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.*

      # Installs wasm-tools needed for AOT compilation (hopefully)
      - name: Install wasm-tools
        run: dotnet workload install wasm-tools
          
      # publishes Blazor project to the release-folder
      - name: Publish .NET Core Project
        run: dotnet publish PokeAutobuilder/PokeAutobuilder.csproj -c Release -o release --nologo
        
      # No longer needed as we're hosting this repositry from the domain pokeautobuilder.com
      # changes the base-tag in index.html from '/' to 'pokemonautoteambuilder' to match GitHub Pages repository subdirectory
      # - name: Change base-tag in index.html from / to pokemonautoteambuilder
      #  run: sed -i 's/<base href="\/" \/>/<base href="\/pokemonautoteambuilder\/" \/>/g' release/wwwroot/index.html
        
      # updating the hash on each modified file and update service-worker-assets.js with the hashes
      # this will allow the app to continue to run as a PWA
      - name: Fix service-worker-assets.js hashes
        working-directory: ${{ env.WWWROOT_DIR }}
        run: |
          jsFile=$(<service-worker-assets.js)
          # remove JavaScript from contents so it can be interpreted as JSON
          json=$(echo "$jsFile" | sed "s/self.assetsManifest = //g" | sed "s/;//g")
          # grab the assets JSON array
          assets=$(echo "$json" | jq '.assets[]' -c)
          for asset in $assets
          do
            oldHash=$(echo "$asset" | jq '.hash')
            #remove leading and trailing quotes
            oldHash="${oldHash:1:-1}"
            path=$(echo "$asset" | jq '.url')
            #remove leading and trailing quotes
            path="${path:1:-1}"
            newHash="sha256-$(openssl dgst -sha256 -binary $path | openssl base64 -A)"

            if [ $oldHash != $newHash ]; then
              # escape slashes for json
              oldHash=$(echo "$oldHash" | sed 's;/;\\/;g')
              newHash=$(echo "$newHash" | sed 's;/;\\/;g')
              echo "Updating hash for $path from $oldHash to $newHash"
              # escape slashes second time for sed
              oldHash=$(echo "$oldHash" | sed 's;/;\\/;g')
              jsFile=$(echo -n "$jsFile" | sed "s;$oldHash;$newHash;g")
            fi
          done

          echo -n "$jsFile" > service-worker-assets.js
        
      # copy index.html to 404.html to serve the same file when a file is not found
      - name: copy index.html to 404.html
        run: cp ${{ env.WWWROOT_DIR }}/index.html ${{ env.WWWROOT_DIR }}/404.html
        
      # add .nojekyll file to tell GitHub pages to not treat this as a Jekyll project. (Allow files and folders starting with an underscore)
      - name: Add .nojekyll file
        run: touch ${{ env.WWWROOT_DIR }}/.nojekyll
        
      - name: Commit wwwroot to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: ${{ env.WWWROOT_DIR }}
    
