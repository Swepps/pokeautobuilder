@inject SessionService SessionService
@inject ProfileService ProfileService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudStack Spacing="1">
	<MudText Typo="Typo.body1" Class="pa-1">@Team!.Name</MudText>
	<div class="d-flex flex-row justify-start gap-1 align-content-center mud-height-full">
		@foreach (SmartPokemon? p in Team!)
		{
			@if (p is not null)
			{
				<PokemonMiniCard Pokemon="p" />
			}
		}
	</div>
	<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
		<MudButton StartIcon="@Icons.Material.Filled.OpenInFull" OnClick="OnClickDetails">Details</MudButton>
		<MudButton StartIcon="@Icons.Material.Filled.Upload" OnClick="OnClickLoadInEditor">Load Into Editor</MudButton>
		<MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="OnClickDelete">Delete</MudButton>
	</MudButtonGroup>
</MudStack>

@code {
	[Parameter]
	public PokemonTeam? Team { get; set; }

	[Parameter] // used for telling the parent of the card that it has updated
	public EventCallback OnUpdated { get; set; }

	// ensure Team has been set
	public override Task SetParametersAsync(ParameterView parameters)
	{
		parameters.SetParameterProperties(this);
		if (Team == null)
			throw new InvalidOperationException($"{nameof(PokemonTeamCard)} requires a {nameof(PokemonTeam)} parameter.");

		return base.SetParametersAsync(ParameterView.Empty);
	}

	public void OnClickDetails()
	{
		var parameters = new DialogParameters();
		parameters.Add("Team", Team);

		DialogService.Show<PokemonTeamDetailsDialog>(StringUtils.FirstCharToUpper(Team!.Name), parameters);
	}

	public async void OnClickLoadInEditor()
	{
		await SessionService.SetGlobalTeam(Team!);
		NavigationManager.NavigateTo(NavigationManager.BaseUri + "/");
	}

	public async void OnClickDelete()
	{
		await ProfileService.RemoveTeam(Team!);
		await OnUpdated.InvokeAsync();
	}
}
