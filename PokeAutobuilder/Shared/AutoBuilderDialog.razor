@using AutoBuilder
@using PokeAutobuilder.Shared.Cards
@using PokeAutobuilder.Shared.Panes
@using PokeAutobuilder.Source.Services
@using PokemonDataModel
@using Utility

@inject SessionService Session
@inject ProfileService Profile
@inject NavigationManager NavigationManager

<MudDialog>
    <DialogContent>
        <MudStack AlignItems="AlignItems.Start">
            <MudDivider DividerType="DividerType.FullWidth" />

            <MudGrid Class="mb-2">
                <MudItem xs="12">
                    <MudGrid Justify="Justify.SpaceEvenly">
                        @for (int i = 0; i < PokemonTeam.MaxTeamSize; i++)
                        {
                            SmartPokemon? p = null;
                            bool locked = false;
                            if (LockedMembers is not null && LockedMembers.Pokemon[i] is not null)
                            {
                                p = LockedMembers.Pokemon[i];
                                locked = true;
                            }
                            else
                            {
                                p = BestTeam.Pokemon[i];
                            }

                            @if (p is not null)
                            {
                                <MudItem xs="4" md="2">
                                    <MudPaper>
                                        @if (locked)
                                        {
                                            <MudIcon Class="ma-1" Icon="@Icons.Material.Filled.Lock" Color="Color.Primary" />
                                        }
                                        <PokemonCard Pokemon="p" />
                                    </MudPaper>
                                </MudItem>
                            }
                            else
                            {
                                <MudItem xs="4" md="2">
                                    <MudSkeleton Height="100px"></MudSkeleton>
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </MudItem>
                @if (!BestTeam.IsEmpty)
                {
                    <MudItem xs="12">
                        <StatsTeamPanel Team="BestTeam" />
                    </MudItem>
                }
            </MudGrid>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudStack Row="true">
                        @if (Generating)
                        {
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Stop" Color="Color.Error" OnClick="OnClickStop">Stop</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" OnClick="OnClickGenerate">Generate</MudButton>
                        }
                        <MudButton Disabled="Generating" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnClickReset">Reset</MudButton>
                    </MudStack>
                </MudItem>
                <MudItem xs="6" md="3">
                    <MudNumericField Disabled="Generating" @bind-Value="NumGenerations" Label="Generations" Variant="Variant.Text" Min="10" Max="200" Step="10" />
                </MudItem>
                <MudItem xs="6" md="3">
                    <MudNumericField Disabled="Generating" @bind-Value="PopulationSize" Label="Population Size" Variant="Variant.Text" Min="50" Max="1000" Step="50" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudButton Disabled="@(Generating || BestTeam.IsEmpty)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Upload" Color="Color.Primary" OnClick="OnClickLoadIntoEditor">Load Into Editor</MudButton>
                </MudItem>
            </MudGrid>

            @if (Generating)
            {
                <MudProgressLinear Color="Color.Primary" Value="@ProgressValue" Size="Size.Medium" Max="@NumGenerations" />
            }

            <MudDivider DividerType="DividerType.FullWidth" />

            <MudText Typo="Typo.h5">Generation Parameters</MudText>

            <MudText Typo="Typo.h6">Types</MudText>
            <MudText Typo="Typo.subtitle1">Click a type to toggle it. Disabled types won't be considered during team generation.</MudText>
            <div>
                @foreach (string t in Globals.AllTypes)
                {
                    <MudButton OnClick="() => OnClickType(t)" Style="height: 50px;" Disabled="Generating">
                        @if (Generating)
                        {
                            <MudImage Src="@StringUtils.DisabledTypeImgFromName(t)" Alt="@t" title="@t" Height="40" Class="ma-1" />
                        }
                        else if (GenerationParameters.Types.ContainsKey(t) && GenerationParameters.Types[t])
                        {
                            <MudImage Src="@StringUtils.TypeImgFromName(t)" Alt="@t" title="@t" Height="40" Class="ma-1" />
                        }
                        else
                        {
                            <MudImage Src="@StringUtils.DisabledTypeImgFromName(t)" Alt="@t" title="@t" Height="30" Class="ma-1" />
                        }
                    </MudButton>
                }
            </div>

            <MudGrid Spacing="2">
                <MudItem xs="12" md="6" lg="4">
                    <MudText Typo="Typo.h6">Resistances</MudText>
                    <MudText Typo="Typo.subtitle1">Use the sliders to fine-tune the importance of type resistances.</MudText>
                    <MudStack Class="px-2">
                        <WeightingSlider Name="All Types"
                                         Tooltip="Importance of a team with at least one Pokémon resistant to each type."
                                         @bind-Value="GenerationParameters.ResistanceAll"
                                         Score="BestTeamScore?.ResistanceAll"
                                         Disabled="Generating"/>

                        <WeightingSlider Name="Balance"
                                         Tooltip="Importance of a balanced number of type resistances."
                                         @bind-Value="GenerationParameters.ResistanceBalance"
                                         Score="BestTeamScore?.ResistanceBalance"
                                         Disabled="Generating"/>

                        <WeightingSlider Name="Amount"
                                         Tooltip="Importance of a higher amount of type resistances."
                                         @bind-Value="GenerationParameters.ResistanceAmount"
                                         Score="BestTeamScore?.ResistanceAmount"
                                         Disabled="Generating" />
                    </MudStack>
                </MudItem>

                <MudItem xs="12" md="6" lg="4">
                    <MudText Typo="Typo.h6">Weaknesses</MudText>
                    <MudText Typo="Typo.subtitle1">Use the sliders to fine-tune the importance of type weaknesses.</MudText>
                    <MudStack Class="px-2">
                        <WeightingSlider Name="Balance"
                                         Tooltip="Importance of a balanced number of type weaknesses."
                                         @bind-Value="GenerationParameters.WeaknessBalance"
                                         Score="BestTeamScore?.WeaknessBalance"
                                         Disabled="Generating" />

                        <WeightingSlider Name="Amount"
                                         Tooltip="Importance of a lower amount of type weaknesses."
                                         @bind-Value="GenerationParameters.WeaknessAmount"
                                         Score="BestTeamScore?.WeaknessAmount"
                                         Disabled="Generating" />
                    </MudStack>
                </MudItem>

                <MudItem xs="12" md="6" lg="4">
                    <MudText Typo="Typo.h6">STAB Coverage</MudText>
                    <MudText Typo="Typo.subtitle1">Use the sliders to fine-tune the importance of STAB coverage.</MudText>
                    <MudStack Class="px-2">
                        <WeightingSlider Name="All Types"
                                         Tooltip="Importance of a team with at least one Pokémon with STAB coverage against each type."
                                         @bind-Value="GenerationParameters.StabAll"
                                         Score="BestTeamScore?.StabAll"
                                         Disabled="Generating" />

                        <WeightingSlider Name="Balance"
                                         Tooltip="Importance of a balanced amount of STAB coverage."
                                         @bind-Value="GenerationParameters.StabBalance"
                                         Score="BestTeamScore?.StabBalance"
                                         Disabled="Generating" />

                        <WeightingSlider Name="Amount"
                                         Tooltip="Importance of a higher amount of STAB coverage."
                                         @bind-Value="GenerationParameters.StabAmount"
                                         Score="BestTeamScore?.StabAmount"
                                         Disabled="Generating" />
                    </MudStack>
                </MudItem>

                <MudItem xs="12" md="6" lg="4">
                    <MudText Typo="Typo.h6">Move Coverage</MudText>
                    <MudText Typo="Typo.subtitle1">Use the sliders to fine-tune the importance of move coverage.</MudText>
                    <MudStack Class="px-2">
                        <WeightingSlider Name="All Types"
                                         Tooltip="Importance of a team with at least one Pokémon with move coverage against each type."
                                         @bind-Value="GenerationParameters.MoveSetAll"
                                         Score="BestTeamScore?.MoveSetAll"
                                         Disabled="Generating" />

                        <WeightingSlider Name="Balance"
                                         Tooltip="Importance of a balanced amount of move coverage."
                                         @bind-Value="GenerationParameters.MoveSetBalance"
                                         Score="BestTeamScore?.MoveSetBalance"
                                         Disabled="Generating" />

                        <WeightingSlider Name="Amount"
                                         Tooltip="Importance of a higher amount of move coverage."
                                         @bind-Value="GenerationParameters.MoveSetAmount"
                                         Score="BestTeamScore?.MoveSetAmount"
                                         Disabled="Generating" />
                    </MudStack>
                </MudItem>

                <MudItem xs="12" md="6" lg="4">
                    <MudText Typo="Typo.h6">Miscellaneous</MudText>
                    <MudText Typo="Typo.subtitle1">Use the sliders to fine-tune the importance of other misc. attributes.</MudText>
                    <MudStack Class="px-2">
                        <WeightingSlider Name="Good Coverage On Offensive Pokémon"
                                         Tooltip="Importance of good coverage on offensive Pokémon. E.g. a Pokémon with good offensive stats should have STAB coverage against more types."
                                         @bind-Value="GenerationParameters.CoverageOnOffensive"
                                         Score="BestTeamScore?.CoverageOnOffensive"
                                         Disabled="Generating" />

                        <WeightingSlider Name="Good Resistances On Defensive Pokémon"
                                         Tooltip="Importance of good resistances on defensive Pokémon. E.g. a Pokémon with good defensive stats should also be resistant to more types."
                                         @bind-Value="GenerationParameters.ResistancesOnDefensive"
                                         Score="BestTeamScore?.ResistancesOnDefensive"
                                         Disabled="Generating" />
                    </MudStack>
                </MudItem>

                <MudItem xs="12">
                    <MudDivider DividerType="DividerType.FullWidth" Class="my-2"/>
                    <MudText Typo="Typo.h6">Stat Weightings</MudText>
                    <MudText Typo="Typo.subtitle1">Use the sliders to adjust the importance of different base statistics. The big slider determines the importance of base statistics compared to the other weighting options.</MudText>
                    <MudSlider @bind-Value="GenerationParameters.BaseStatTotal" Size="Size.Large" Min="0" Max="1" Step="0.05" Disabled="Generating"></MudSlider>
                    <MudGrid>
                        <MudItem xs="6" sm="4" md="2">
                            <MudSlider @bind-Value="GenerationParameters.BaseStatHp" Size="Size.Small" Min="0" Max="1" Step="0.05" Disabled="Generating">HP</MudSlider>
                            @if (BestTeamScore is not null)
                            {
                                <MudProgressLinear Color="Color.Tertiary" Size="Size.Medium" Value="@BestTeamScore.BaseStatHp" Max="1.0">
                                    <MudText Typo="Typo.caption">@(String.Format("{0:0.00}", BestTeamScore.BaseStatHp * 100))%</MudText>
                                </MudProgressLinear>
                            }
                        </MudItem>
                        <MudItem xs="6" sm="4" md="2">
                            <MudSlider @bind-Value="GenerationParameters.BaseStatAtt"   Size="Size.Small" Min="0" Max="1" Step="0.05" Disabled="Generating">Attack</MudSlider>
                            @if (BestTeamScore is not null)
                            {
                                <MudProgressLinear Color="Color.Tertiary" Size="Size.Medium" Value="@BestTeamScore.BaseStatAtt" Max="1.0">
                                    <MudText Typo="Typo.caption">@(String.Format("{0:0.00}", BestTeamScore.BaseStatAtt * 100))%</MudText>
                                </MudProgressLinear>
                            }
                        </MudItem>
                        <MudItem xs="6" sm="4" md="2">
                            <MudSlider @bind-Value="GenerationParameters.BaseStatDef"   Size="Size.Small" Min="0" Max="1" Step="0.05" Disabled="Generating">Defense</MudSlider>
                            @if (BestTeamScore is not null)
                            {
                                <MudProgressLinear Color="Color.Tertiary" Size="Size.Medium" Value="@BestTeamScore.BaseStatDef" Max="1.0">
                                    <MudText Typo="Typo.caption">@(String.Format("{0:0.00}", BestTeamScore.BaseStatDef * 100))%</MudText>
                                </MudProgressLinear>
                            }
                        </MudItem>
                        <MudItem xs="6" sm="4" md="2">
                            <MudSlider @bind-Value="GenerationParameters.BaseStatSpAtt" Size="Size.Small" Min="0" Max="1" Step="0.05" Disabled="Generating">Sp. Attack</MudSlider>
                            @if (BestTeamScore is not null)
                            {
                                <MudProgressLinear Color="Color.Tertiary" Size="Size.Medium" Value="@BestTeamScore.BaseStatSpAtt" Max="1.0">
                                    <MudText Typo="Typo.caption">@(String.Format("{0:0.00}", BestTeamScore.BaseStatSpAtt * 100))%</MudText>
                                </MudProgressLinear>
                            }
                        </MudItem>
                        <MudItem xs="6" sm="4" md="2">
                            <MudSlider @bind-Value="GenerationParameters.BaseStatSpDef" Size="Size.Small" Min="0" Max="1" Step="0.05" Disabled="Generating">Sp. Defense</MudSlider>
                            @if (BestTeamScore is not null)
                            {
                                <MudProgressLinear Color="Color.Tertiary" Size="Size.Medium" Value="@BestTeamScore.BaseStatSpDef" Max="1.0">
                                    <MudText Typo="Typo.caption">@(String.Format("{0:0.00}", BestTeamScore.BaseStatSpDef * 100))%</MudText>
                                </MudProgressLinear>
                            }
                        </MudItem>
                        <MudItem xs="6" sm="4" md="2">
                            <MudSlider @bind-Value="GenerationParameters.BaseStatSpe"   Size="Size.Small" Min="0" Max="1" Step="0.05" Disabled="Generating">Speed</MudSlider>
                            @if (BestTeamScore is not null)
                            {
                                <MudProgressLinear Color="Color.Tertiary" Size="Size.Medium" Value="@BestTeamScore.BaseStatSpe" Max="1.0">
                                    <MudText Typo="Typo.caption">@(String.Format("{0:0.00}", BestTeamScore.BaseStatSpe * 100))%</MudText>
                                </MudProgressLinear>
                            }
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>

        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public PokemonTeam? LockedMembers { get; set; }

    private PokemonTeamGeneticAlgorithm GeneticAlgorithm = new PokemonTeamGeneticAlgorithm();
    private PokemonTeam BestTeam = new PokemonTeam();
    private AutoBuilderWeightings? BestTeamScore;

    private bool Generating = false;
    private int GenerationsRan { get; set; } = 0;
    private int ProgressValue { get; set; } = 0;

    private int NumGenerations = 50;
    private int PopulationSize = 250;

    private double? GABestChromFitness = 0;
    private double BestOverallFitness = 0;

    public AutoBuilderWeightings GenerationParameters = new(
            AutoBuilderWeightings.MakeDefaultTypeWeightings()
            , resistanceAll: 0.5
            , resistanceBalance: 0.5
            , resistanceAmount: 0.5

            , weaknessBalance: 0.5
            , weaknessAmount: 0.5

            , stabAll: 0.5
            , stabBalance: 0.5
            , stabAmount: 0.5

            , moveSetAll: 0.5
            , moveSetBalance: 0.5
            , moveSetAmount: 0.5

            , coverageOnOffensive: 0.0
            , resistancesOnDefensive: 0.0

            , baseStatTotal: 0.5
            , baseStatHp: 0.5
            , baseStatAtt: 0.5
            , baseStatDef: 0.5
            , baseStatSpAtt: 0.5
            , baseStatSpDef: 0.5
            , baseStatSpe: 0.5
    );

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // load the parameters from the current session
            if (Session.AutobuilderParams is not null)
            {
                GenerationParameters = Session.AutobuilderParams;
            }

            // set generation ran callback event
            GeneticAlgorithm.GenerationRan += HandleGenerationRan;

            StateHasChanged();
        }
    }

    public void OnClickType(string typeName)
    {
        GenerationParameters.Types[typeName] = !GenerationParameters.Types[typeName];
        StateHasChanged();
    }

    public void OnClickGenerate()
    {
        Generating = true;
        GenerationsRan = 0;
        ProgressValue = 0;
        BestOverallFitness = 0;

        AutoBuilderWeightings weightingsCopy = new(GenerationParameters);

        GeneticAlgorithm.Initialize(
            PopulationSize
            , Profile.PokemonStorage.Boxes[0]
            , LockedMembers is null ? new PokemonTeam() : LockedMembers
            , weightingsCopy);
        GeneticAlgorithm.RunInBackground();

        StateHasChanged();
    }

    public void OnClickStop()
    {
        GeneticAlgorithm.Stop();

        Generating = false;
        StateHasChanged();
    }

    public void OnClickReset()
    {
        BestTeam = new PokemonTeam();
        BestTeamScore = null;
        StateHasChanged();
    }

    public async Task OnClickLoadIntoEditor()
    {
        await Session.SetTeamAsync(BestTeam);
        await Session.SetAutobuilderParamsAsync(GenerationParameters);
        MudDialog!.Close(DialogResult.Ok(true));
    }

    // called after each generation is completed
    void HandleGenerationRan(PokemonTeamGeneticAlgorithm geneticAlgorithm)
    {
        if (geneticAlgorithm.BestChromosome is null)
            return;

        PokemonTeam GeneratedTeam = geneticAlgorithm.BestChromosome.GetTeam();
        GABestChromFitness = geneticAlgorithm.BestChromosome.Fitness;

        if (GABestChromFitness > BestOverallFitness)
        {
            BestTeam = GeneratedTeam;
            BestTeamScore = geneticAlgorithm.BestChromosome.WeightingScores;
            BestOverallFitness = (double)GABestChromFitness;
        }

        GenerationsRan++;

        if (GenerationsRan % 5 == 0)
        {
            ProgressValue = GenerationsRan;
            if (ProgressValue >= NumGenerations)
            {
                OnClickStop();
            }
        }

        StateHasChanged();
    }

    async Task Submit() 
    {
        GeneticAlgorithm.Stop();
        await Session.SetAutobuilderParamsAsync(GenerationParameters);
        MudDialog!.Close(DialogResult.Ok(true)); 
    }
    void Cancel() 
    { 
        GeneticAlgorithm.Stop();
        MudDialog!.Cancel(); 
    }
}
