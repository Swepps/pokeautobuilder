@using PokemonDataModel
@using PokeAutobuilder.Source.Services;
@using PokeAutobuilder.Shared.Cards
@using PokeApiNet
@using Utility

@using static PokeAutobuilder.Pages.TeamBuilderPage
@using Type = PokeApiNet.Type

@inject ProfileService Profile
@inject SessionService Session
@inject PokeApiService PokeApiService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Elevation="4" Class="d-flex flex-column align-center justify-center mud-width-full pa-2">

        <MudAutocomplete T="IPokemonSearchable" Label="Search for a Pokémon" @bind-Value="PokemonSearchValue" SearchFunc="@Search"
                         ResetValueOnEmptyText="true" Disabled="Locked" MaxItems="50"
                         CoerceText="true" CoerceValue="false">
            <MoreItemsTemplate>
                <MudText Align="Align.Center" Typo="Typo.body1">
                    ...                    
                </MudText>
                <MudText Align="Align.Center" Typo="Typo.body2">
                50 results shown. Start typing to look for more.
            </MudText>
            </MoreItemsTemplate>
        </MudAutocomplete>

    <div style="height: 50px">
        @if (_pokemonSearchValueVarieties.Count > 1)
        {
            <MudSelect Dense="true" T="string" Label="Form" AnchorOrigin="Origin.TopCenter"
                       @bind-Value="_PokemonFormName">
                @foreach (var v in _pokemonSearchValueVarieties)
                {
                    <MudSelectItem Value="@v.Name" />
                }
            </MudSelect>
        }
    </div>
    @if (Pokemon is not null)
    {
        <PokemonCard Pokemon="Pokemon" IsNameDisplayed="false" />
        @if (Lockable)
        {
            <MudToggleIconButton @bind-Toggled="@Locked"
                                 Icon="@Icons.Material.Filled.LockOpen" Color="@Color.Dark"
                                 ToggledIcon="@Icons.Material.Filled.Lock" ToggledColor="@Color.Primary" />
        }
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudTooltip Text="Details">
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.OpenInFull" OnClick="OnClickDetails"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Add To Storage">
                <MudIconButton Disabled="@(Profile.PokemonStorage.Pokemon.Contains(Pokemon))"
                Size="Size.Small" Icon="@Icons.Material.Filled.Save" OnClick="OnClickAddToStorage"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Randomize">
                <MudIconButton Disabled="Locked" Size="Size.Small" Icon="@Icons.Material.Filled.Loop" OnClick="OnClickRandomize"></MudIconButton>
            </MudTooltip>
        </MudButtonGroup>
    }
    else if (PokemonSearchValue is not null)
    {
        if (_errorFetchingPokemon)
        {
            <MudText Typo="Typo.caption">
                Error Fetching @PokemonSearchValue.ToString()
                from API
            </MudText>
        }
        else
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" Class="mt-8 mb-8" />
        }        
    }
    else
    {
        
    }

</MudPaper>

@code {
    [Parameter]
    public IEnumerable<IPokemonSearchable>? SearchList { get; set; }

    [Parameter]
    public EventCallback<PokemonSearchBox> OnPokemonChanged { get; set; }

    [Parameter]
    public bool Lockable { get; set; }

    // currently selected pokemon
    private SmartPokemon? _pokemon;
    public SmartPokemon? Pokemon
    {
        get => _pokemon;
        set
        {
            _ = SetPokemonAsync(value);
        }
    }
    private SmartPokemon? _prevPokemon;

    private List<NamedApiResource<Pokemon>> _pokemonSearchValueVarieties = new();
    private bool _pokemonSearchValueVarietiesChanged = true;

    // the string which holds the last valid search result from the search bar
    private IPokemonSearchable? _pokemonSearchValue;
    public IPokemonSearchable? PokemonSearchValue
    {
        get { return _pokemonSearchValue; }
        set 
        {
            _pokemonSearchValue = value;
            _ = OnUpdatedSearchValue();
        }
    }
    private IPokemonSearchable? _prevPokemonSearchValue;

    // the string used in the form selector
    private string? _pokemonFormName;
    public string? _PokemonFormName
    {

        get { return _pokemonFormName; }
        set
        {
            _pokemonFormName = value;
            _ = OnUpdatedPokemonForm();
        }
    }
    private string? _prevPokemonFormName;

    // only relevant if this search box is part of a team
    private bool _locked = false;
    public bool Locked
    {
        get { return _locked; }
        set
        {
            _locked = value;
        }
    }

    private bool _errorFetchingPokemon = false;

    public void Refresh()
    {
        StateHasChanged();
    }

    private async Task<IEnumerable<IPokemonSearchable>> Search(string value)
    {
        // return an empty list if one hasn't been provided
        if (SearchList is null)
            return new List<IPokemonSearchable>();

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return SearchList;

        // search the storage in a background thread
        return await Task.Run(() => SearchList.Where(p => p.ToString()!.ToLower().Contains(value.ToLower())).OrderBy(p => p.ToString()!.ToLower()));
    }

    public async Task OnUpdatedPokemonForm()
    {        
        // don't bother if the form name is the same as the current pokemon
        if (_PokemonFormName is null || (Pokemon != null && _PokemonFormName == Pokemon.Name))
            return;

        string form = _PokemonFormName;
        await SearchPokemon(null);
        await SearchPokemon(form);
    }

    public async Task OnUpdatedSearchValue()
    {
        if (PokemonSearchValue is not null)
        {
            _pokemonSearchValueVarieties = (await PokemonSearchValue.GetAllVarietiesAsync()).ToList();
            await SearchPokemon(_pokemonSearchValueVarieties[0].Name);
        }
        else
        {
            await SearchPokemon(null);
        }
    }

    public async Task SearchPokemon(string? pokemonName)
    { 
        _errorFetchingPokemon = false;

        // clear pokemon
        if (pokemonName is null)
        {
            _pokemon = null;
            _pokemonFormName = null;
            _pokemonSearchValueVarieties.Clear();
        }
        else
        {
            SmartPokemon? searchedPokemon = await PokeApiService.GetPokemonAsync(pokemonName);
            if (searchedPokemon is not null)
                await SetPokemonAsync(searchedPokemon);
            else
                _errorFetchingPokemon = true;
        }        
    }

    public async Task SetPokemonAsync(SmartPokemon? pokemon)
    {
        SmartPokemon? before = _pokemon;

        _pokemon = pokemon;
        if (_pokemon is not null)
        {
            _pokemonSearchValue = SearchList!.Where(entry => entry.ToString()!.ToLower().Equals(_pokemon.Species.Name)).FirstOrDefault();
            _pokemonFormName = _pokemon.Name;
            _pokemonSearchValueVarieties.Clear();
            PokemonSpecies species = await _pokemon.GetSpeciesAsync();
            foreach (PokemonSpeciesVariety variety in species.Varieties)
            {
                _pokemonSearchValueVarieties.Add(variety.Pokemon);
            }
        }
        else
        {
            _pokemonSearchValue = null;
            _pokemonFormName = null;
            _pokemonSearchValueVarieties.Clear();
        }

        if (before != _pokemon)
        {
            _ = OnPokemonChanged.InvokeAsync(this);
        }

        StateHasChanged();
    }

    // pokemon ability functionality
    public void OnChangeAbility(string? value)
    {
        // SetChosenAbility uses a string to find an ability with a matching name
        if (value is not null && _pokemon is not null)
            _pokemon.SelectAbility(value);
    }

    public async Task OnClickAddToStorage()
    {
        if (Pokemon is null)
            return;

        await Profile.AddPokemonToStorageAsync(Pokemon);

        Snackbar.Add("Added " + Pokemon.ToString() + " to Pokémon Storage", Severity.Success);
    }

    public async Task OnClickDetails()
    {
        var parameters = new DialogParameters();
        parameters.Add("Pokemon", Pokemon);

        var dialog = await DialogService.ShowAsync<PokemonDetailsDialog>(StringUtils.FirstCharToUpper(Pokemon!.Name), parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SmartPokemon)
        {
            // replace old pokemon with updated version
            SmartPokemon? pokemon = result.Data as SmartPokemon;
            if (pokemon is not null)
            {
                // add and remove pokemon from storage to "update" it
                // we can directly remove it here because it's about to be updated
                // properly by AddPokemonToStorageAsync anyway
                if (Profile.PokemonStorage.Pokemon.Remove(pokemon))
                    await Profile.AddPokemonToStorageAsync(pokemon);
                Pokemon = pokemon;
            }
            StateHasChanged();
        }
    }

    public async Task OnClickRandomize()
    {
        await SearchPokemon(null);

        Random rand = new Random();
        
        _pokemonSearchValue = SearchList!.ElementAt(rand.Next(SearchList!.Count()));

        if (_pokemonSearchValue != null)
        {            
            _pokemonSearchValueVarieties = (await _pokemonSearchValue.GetAllVarietiesAsync()).ToList();
            await SearchPokemon(_pokemonSearchValueVarieties[rand.Next(_pokemonSearchValueVarieties.Count)].Name);
        }
    }

    protected override bool ShouldRender()
    {
        return _prevPokemon != _pokemon ||
        _prevPokemonSearchValue != _pokemonSearchValue ||
        _prevPokemonFormName != _pokemonFormName ||
        _pokemonSearchValueVarietiesChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _prevPokemon = _pokemon;
        _prevPokemonSearchValue = _pokemonSearchValue;
        _prevPokemonFormName = _pokemonFormName;
        _pokemonSearchValueVarietiesChanged = false;
    }
}
