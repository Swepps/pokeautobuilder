@using PokeApiNet
@using Type = PokeApiNet.Type

<div class="card">
    <div class="autocomplete">
        <form >            
            <input @bind=PokemonSearchName placeholder="Pokemon" @oninput="@HandleInput" class="form-control filter" />
            @if (entryResults is not null)
            {
                <ul class="options">
                    @if (entryResults.Any())
                    {
                        @if (entryResults[0].Species.Name == filter)
                        {
                            SelectPokemon(entryResults[0]);
                        }
                        else
                        {
                            @foreach (var entry in entryResults)
                            {
                                <li class="option" @onclick=@(_ => SelectPokemon(entry))>
                                    <span class="option-text">@entry</span>
                                </li>
                            }
                        }
                    }
                    else
                    {
                        <li class="disabled option">No results</li>
                    }
                </ul>
            }            
        </form>
    </div>
    @if (pokemon == null || species == null || generation == null)
    {
        <span></span>
    }
    else
    {
        <img class="artwork" src="@pokemon.Sprites.Other.OfficialArtwork.FrontDefault" alt="@pokemon.Name" title="@pokemon.Name"/>
        <div class="types">
            @foreach (PokemonType t in pokemon.Types)
            {
                <img src="@StringUtils.TypeImgFromName(t.Type.Name)" alt="@t.Type.Name" title="@t.Type.Name" />
            }
        </div>
        <div class="generation">
            <span>@generation.Names.Where( name => name.Language.Name == Globals.Language).FirstOrDefault()?.Name</span>
        </div>
        <div class="forms">
            @if (species.Varieties.Count > 1)
            {            
                <select class="input-form" title="Form" @onchange="OnChangeForm">
                    @foreach (PokemonSpeciesVariety v in species.Varieties)
                    {
                        <option class="option" value="@v.Pokemon.Name">@v.Pokemon.Name</option>
                    }
                </select>            
            }
        </div>
        <div class="forms">
            @if (pokemon.Abilities.Count > 1)
            {
                <select class="input-form" title="Ability" @onchange="OnChangeAbility">
                    @foreach (PokemonAbility a in pokemon.Abilities)
                    {
                        <option class="option" value="@a.Ability.Name">@a.Ability.Name</option>
                    }
                </select>
            }
            else if (pokemon.Abilities.Count == 1)
            {
                <select class="input-form" title="Ability" disabled>
                    <option class="option" value="@pokemon.Abilities[0].Ability.Name">@pokemon.Abilities[0].Ability.Name</option>
                </select>
            }
        </div>
    }
</div>

@code {
    // the main cards on the team builder page are mapped to an index in the team
    // in order to be able to update the team when the cards are updated
    [Parameter]
    public int PokemonTeamIndex { get; set; } = -1;

    [Parameter] // used for telling the parent of the card that it has updated
    public EventCallback OnUpdated { get; set; }

    // the string which holds the last valid search result from the search bar
    public string? PokemonSearchName { get; set; } = "";
    // the string used in the form selector
    public string? PokemonFormName { get; set; } = "";

    // holds the information about the currently selected pokemon to be displayed on the card
    private SmartPokemon? pokemon;
    private PokemonSpecies? species;
    private Generation? generation;

    // when component is initialised
    protected override async Task OnInitializedAsync()
    {
        // use the team index to get this pokemon if possible
        if (PokemonTeamIndex >= 0 && PokemonTeamIndex < 6)
        {
            pokemon = Globals.PokemonTeam[PokemonTeamIndex];
        }

        if (pokemon is not null)
            species = await PokeApiHandler.GetPokemonSpeciesAsync(pokemon);
        if (species is not null)
            generation = await PokeApiHandler.GetGenerationAsync(species);

        await Update();
    }

    private async Task Update()
    {
        // update the global pokemon team if this card has a team index
        if (PokemonTeamIndex >= 0 && PokemonTeamIndex < 6)
            Globals.PokemonTeam[PokemonTeamIndex] = pokemon;

        StateHasChanged();

        await OnUpdated.InvokeAsync();
    }

    // pokemon search functionality
    List<SmartPokemonEntry>? entryResults;
    string? filter; // holds the current text in the search bar

    // called whenever the search box is modified
    public async void HandleInput(ChangeEventArgs e)
    {
        filter = e.Value?.ToString();
        if (filter?.Length > 1)
        {
            filter = filter.ToLower();
            entryResults = Globals.Pokedex.SearchPokedex(filter);
        }
        else // emptied the search string, remove the selected pokemon
        {
            entryResults = null;
            pokemon = null;
            species = null;
            generation = null;

            await Update();
        }
    }

    public async void SelectPokemon(SmartPokemonEntry entry)
    {
        // empty the search results
        entryResults = null;

        PokemonSearchName = entry.Species.Name;
        species = await PokeApiHandler.GetPokemonSpeciesAsync(PokemonSearchName);
        if (species is not null)
        {
            // simultaneously get the default pokemon and generation from this species
            var getPokemonTask = PokeApiHandler.GetPokemonAsync(species.Varieties[0].Pokemon.Name);
            var getGenerationTask = PokeApiHandler.GetGenerationAsync(species);
            await Task.WhenAll(getPokemonTask, getGenerationTask);
            pokemon = getPokemonTask.Result;
            generation = getGenerationTask.Result;
        }
        else
        {
            pokemon = null;
            generation = null;
        }

        await Update();
    }

    // pokemon form functionality
    public async void OnChangeForm(ChangeEventArgs e)
    {
        PokemonFormName = e.Value?.ToString();
        
        // don't bother if the form name is the same as the current pokemon
        if (PokemonFormName is null || (pokemon != null && PokemonFormName == pokemon.Name))
            return;

        pokemon = await PokeApiHandler.GetPokemonAsync(PokemonFormName);

        await Update();
    }

    // pokemon ability functionality
    public void OnChangeAbility(ChangeEventArgs e)
    {
        // SetChosenAbility uses a string to find an ability with a matching name
        if (e.Value is not null && pokemon is not null)
            pokemon.SetChosenAbility(e.Value.ToString()!);
    }
}
