@using PokeApiNet
@using blazorServerApp.Data
@using Type = PokeApiNet.Type

<div class="card">
    <form >
        <div class="autocomplete">
            <input @bind=PokemonName placeholder="Pokemon" @oninput="@HandleInput" class="form-control filter" />
            @if (entryResults is not null)
            {
                <ul class="options">
                    @if (entryResults.Any())
                    {
                        @if (entryResults[0].Species.Name == filter)
                        {
                            SelectPokemon(entryResults[0].Species.Name);
                        }
                        else
                        {
                            @foreach (var entry in entryResults)
                            {
                                <li class="option" @onclick=@(_ => SelectPokemon(entry.Species.Name))>
                                    <span class="option-text">@entry</span>
                                </li>
                            }
                        }
                    }
                    else
                    {
                        <li class="disabled option">No results</li>
                    }
                </ul>
            }
        </div>
    </form>
    @if (error)
    {
        <p>Error while fetching @PokemonName</p>
    }
    else if (pokemon == null || species == null || generation == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <img src="@pokemon.Sprites.Other.OfficialArtwork.FrontDefault" alt="@pokemon.Name" title="@pokemon.Name"/>
        <div class="types">
            @foreach (PokemonType t in pokemon.Types)
            {
                <img src="@StringUtils.TypeImgFromName(t.Type.Name)" alt="@t.Type.Name" title="@t.Type.Name" />
            }
        </div>
        <div class="generation">
            <p>@generation.Names.Where( name => name.Language.Name == Globals.Language).FirstOrDefault()?.Name</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? PokemonName { get; set; } = "pikachu";

    private SmartPokemon? pokemon;
    private PokemonSpecies? species;
    private Generation? generation;

    protected override async Task OnInitializedAsync()
    {
        await UpdatePokemon();
    }

    public async Task UpdatePokemon()
    {
        if (PokemonName is null)
            return;

        pokemon = await PokeApiHandler.GetPokemonAsync(PokemonName);
        if (pokemon is null)
            error = true;
        else
        {
            species = await PokeApiHandler.GetPokemonSpeciesAsync(pokemon);
            if (species is null)
                error = true;
            else
            {
                generation = await PokeApiHandler.GetGenerationAsync(species);
            }
        }

        StateHasChanged();
    }

    // pokemon search functionality
    List<SmartPokemonEntry>? entryResults;
    string? filter;
    bool error = false;

    public void HandleInput(ChangeEventArgs e)
    {
        error = false;
        filter = e.Value?.ToString();
        if (filter?.Length > 1)
        {
            filter = filter.ToLower();
            entryResults = Globals.Pokedex.SearchPokedex(filter);
        }
        else
        {
            entryResults = null;
            pokemon = null;
            species = null;
        }
    }

    public async void SelectPokemon(string name)
    {
        PokemonName = name;
        entryResults = null;

        await UpdatePokemon();
    }
}
