@page "/storage"

@using PokemonDataModel
@using PokeAutobuilder.Source.Services
@using PokeAutobuilder.Shared;

@inject NavigationManager NavigationManager
@inject ProfileService Profile
@inject IDialogService DialogService

<PageTitle>Pokémon Storage</PageTitle>

<div class="d-flex flex-wrap gap-4">
    <MudPaper MinWidth="320px" MaxWidth="600px" Height="fit-content" Class="flex-auto">
        <PokemonDetails Pokemon="SelectedPokemon">
            <ActionsContent>
                <div class="d-flex justify-center align-end mud-height-full">
                    <MudButtonGroup VerticalAlign="true" 
                                    OverrideStyles="false"
                                    Size="Size.Large"
                                    Class="mud-width-full"
                                    >
                        <MudButton Variant="Variant.Outlined"
                                   Disabled="true">
                            MOVE
                        </MudButton>
                        <MudButton 
                                   Variant="Variant.Outlined"
                                   OnClick="OnClickEvolveAsync"
                                   Disabled="@(!_selectedPokemonCanEvolve)">
                            EVOLVE
                        </MudButton>
                        <MudButton Color="Color.Error"
                                   Variant="Variant.Outlined"
                                   OnClick="OnClickReleaseAsync"
                                   Disabled="@(SelectedPokemon is null)">
                            RELEASE
                        </MudButton>
                    </MudButtonGroup>
                </div>
            </ActionsContent>
        </PokemonDetails>
    </MudPaper>
    <MudPaper Class="pa-1 d-flex flex-md-1" MinWidth="325px" Elevation="0" Square="true">
        <CascadingValue Value="@SelectedPokemon">
            <PokemonStorageBox PokemonCollection="Profile.PokemonStorage.Pokemon" OnClickPokemon="OnSelectPokemonAsync" />
        </CascadingValue>
    </MudPaper>
</div>

<PageFooter />

@code {
    private SmartPokemon? _selectedPokemon;
    public SmartPokemon? SelectedPokemon 
    {
        get => _selectedPokemon;
        set
        {
            _selectedPokemon = value;
        }
    }

    private bool _selectedPokemonCanEvolve = false;

    private string _messageBoxState = "Message box hasn't been opened yet";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SmartPokemon? initialPokemon = Profile.PokemonStorage.Pokemon.FirstOrDefault();
            if (initialPokemon is not null)
            {
                await OnSelectPokemonAsync(initialPokemon);
            }
        }
    }

    protected async Task OnSelectPokemonAsync(SmartPokemon selectedPokemon)
    {
        SelectedPokemon = null;
        _selectedPokemonCanEvolve = await PokeApiService.Instance!.CanEvolve(selectedPokemon);
        SelectedPokemon = selectedPokemon;
        StateHasChanged();
    }

    protected async Task OnClickReleaseAsync()
    {
        if (SelectedPokemon is not null)
        {
            bool? result = await DialogService.ShowMessageBox(
                "Warning"
                , "Are you sure you want to release " + SelectedPokemon.ToString() + "?"
                , yesText: "Release!"
                , cancelText: "Cancel"
                , options: new() { MaxWidth = MaxWidth.ExtraSmall }
            );
            _messageBoxState = result == null ? "Canceled" : "Released";
            if (_messageBoxState == "Released")
            {
                await Profile.RemovePokemonFromStorageAsync(SelectedPokemon);
                SmartPokemon? newSelectedPokemon = Profile.PokemonStorage.Pokemon.FirstOrDefault();
                if (newSelectedPokemon is not null)
                {
                    await OnSelectPokemonAsync(newSelectedPokemon);
                }
            }
        }
    }

    protected async Task OnClickEvolveAsync()
    {
        var parameters = new DialogParameters();
        parameters.Add("Pokemon", SelectedPokemon);

        var dialog = await DialogService.ShowAsync<EvolvePokemonDialog>("Evolving " + SelectedPokemon!.ToString() + "..."
        , parameters
        , options: new() { MaxWidth = MaxWidth.Medium });
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SmartPokemon)
        {
            // replace old pokemon with evolved version
            SmartPokemon? pokemon = result.Data as SmartPokemon;
            if (pokemon is not null)
            {
                // add and remove pokemon from storage to "update" it
                // we can directly remove it here because it's about to be updated
                // properly by AddPokemonToStorageAsync anyway
                if (Profile.PokemonStorage.Pokemon.Remove(SelectedPokemon))
                    await Profile.AddPokemonToStorageAsync(pokemon);
                await OnSelectPokemonAsync(pokemon);
            }
        }
    }
}
