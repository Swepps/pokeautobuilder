@page "/storage"
@using PokeApiNet
@using PokeAutobuilder.Shared.Cards
@using PokeAutobuilder.Source.Services;
@using PokemonDataModel


@inject NavigationManager NavigationManager
@inject ProfileService Profile
@inject IDialogService DialogService

<PageTitle>Pokémon Storage</PageTitle>

<div class="d-flex flex-wrap gap-4">
    <MudPaper MinWidth="320px" MaxWidth="600px" Height="fit-content">
        <PokemonDetails Pokemon="SelectedPokemon">
            <ActionsContent>
                <div class="d-flex justify-center align-end mud-height-full">
                    <MudButtonGroup VerticalAlign="true" 
                                    OverrideStyles="false"
                                    Size="Size.Large"
                                    Class="mud-width-full"
                                    >
                        <MudButton Disabled="true">MOVE</MudButton>
                        <MudButton Disabled="@(_selectedPokemonEvolutions.Count == 0)">
                            @if (_selectedPokemonEvolutions.Count == 1)
                            {
                                <div>EVOLVE</div>
                            }
                            else
                            {
                                <MudMenu Label="EVOLVE" Disabled="@(_selectedPokemonEvolutions.Count == 0)">
                                    @foreach (SmartPokemon evolution in _selectedPokemonEvolutions)
                                    {
                                        <MudMenuItem>
                                            <PokemonMiniCard Pokemon="evolution" />
                                        </MudMenuItem>
                                    }
                                </MudMenu>
                            }
                        </MudButton>                        
                        <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="OnClickReleaseAsync">RELEASE</MudButton>
                    </MudButtonGroup>
                    <MudPopover Open="_isEvolveOpen" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Paper="false">
                        <MudPaper Outlined="true">
                            @foreach (SmartPokemon evolution in _selectedPokemonEvolutions)
                            {
                                <PokemonMiniCard Pokemon="evolution" />
                            }
                        </MudPaper>
                    </MudPopover>
                </div>
            </ActionsContent>
        </PokemonDetails>
    </MudPaper>
    <MudPaper Class="pa-1 d-flex flex-md-1" MinWidth="325px" Elevation="0" Square="true">
        <CascadingValue Value="@SelectedPokemon">
            <StorageBox OnClickPokemon="OnSelectPokemonAsync" />
        </CascadingValue>
    </MudPaper>
</div>

<PageFooter />

@code {
    private SmartPokemon? _selectedPokemon;
    public SmartPokemon? SelectedPokemon 
    {
        get => _selectedPokemon;
        set
        {
            _selectedPokemon = value;
            StateHasChanged();
        }
    }

    private List<SmartPokemon> _selectedPokemonEvolutions = [];

    private string _messageBoxState = "Message box hasn't been opened yet";

    private bool _isEvolveOpen = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SelectedPokemon = Profile.PokemonStorage.Pokemon.FirstOrDefault();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected async Task OnSelectPokemonAsync(SmartPokemon selectedPokemon)
    {
        SelectedPokemon = selectedPokemon;
        _selectedPokemonEvolutions = await PokeApiService.Instance!.GetNextEvolutions(SelectedPokemon);
        StateHasChanged();
    }

    protected async Task OnClickReleaseAsync()
    {
        if (SelectedPokemon is not null)
        {
            bool? result = await DialogService.ShowMessageBox(
                "Warning"
                , "Are you sure you want to release " + SelectedPokemon.ToString() + "?"
                , yesText: "Release!"
                , cancelText: "Cancel"
                , options: new() { MaxWidth = MaxWidth.ExtraSmall }
            );
            _messageBoxState = result == null ? "Canceled" : "Released";
            if (_messageBoxState == "Released")
            {
                await Profile.RemovePokemonFromStorageAsync(SelectedPokemon);
                SelectedPokemon = Profile.PokemonStorage.Pokemon.FirstOrDefault();
                StateHasChanged();
            }
        }
    }

    protected void OnClickEvolve()
    {
        _isEvolveOpen = true;
    }
}
