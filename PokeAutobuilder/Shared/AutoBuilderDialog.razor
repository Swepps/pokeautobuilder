@using pokeAutoBuilder.Shared.Panes
@using pokeAutoBuilder.Source.Services;
@using pokeAutoBuilder.Source.TeamGeneration;
@using pokeAutoBuilder.Shared.Cards

@inject SessionService Session
@inject ProfileService Profile
@inject NavigationManager NavigationManager

<MudDialog>
    <DialogContent>
        <MudStack AlignItems="AlignItems.Start">
            <MudDivider DividerType="DividerType.FullWidth" />

            <MudText Typo="Typo.h6">Type Weightings</MudText>
            <MudText Typo="Typo.subtitle1">Click a type to toggle it. Disabled types won't be considered during team generation.</MudText>
            <div>
                @foreach (string t in Globals.AllTypes)
                {                    
                    <MudButton OnClick="() => OnClickType(t)" Style="height: 50px;">
                        @if (typeWeightings.ContainsKey(t) && typeWeightings[t])
                        {
                            <MudImage Src="@StringUtils.TypeImgFromName(t)" Alt="@t" title="@t" Height="40" Class="ma-1" />
                        }
                        else
                        {
                            <MudImage Src="@StringUtils.DisabledTypeImgFromName(t)" Alt="@t" title="@t" Height="30" Class="ma-1" />
                        }
                    </MudButton>
                }
            </div>

            <MudDivider DividerType="DividerType.FullWidth" />

            <MudText Typo="Typo.h6">Balance Weightings</MudText>
            <MudText Typo="Typo.subtitle1">Use the checkboxes and sliders to adjust the importance of different team attributes.</MudText>
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6">
                    <MudStack Class="pt-4">
                        <MudTooltip Text="Prioritise a team with at least one Pokémon resistant to each type." Placement="Placement.Right">
                            <MudCheckBox T="bool" @bind-Checked="resistantAll" Label="Resistant To All Types" />
                        </MudTooltip>
                        <MudTooltip Text="Prioritise a team with at least one Pokémon that has STAB coverage for each type." Placement="Placement.Right">
                            <MudCheckBox T="bool" @bind-Checked="stabCoverageAll" Label="STAB Against All Types" />
                        </MudTooltip>
                        <MudTooltip Text="Weigh coverage higher on offensive Pokémon. E.g. a Pokémon with good offensive stats should also have good STAB coverage." Placement="Placement.Right">
                            <MudCheckBox T="bool" @bind-Checked="coverageOnOffensive" Label="Good Coverage On Offensive Pokémon" />
                        </MudTooltip>
                        <MudTooltip Text="Weigh resistances higher on defensive Pokémon. E.g. a Pokémon with good defensive stats should also have good type resistances." Placement="Placement.Right">
                            <MudCheckBox T="bool" @bind-Checked="resistancesOnDefensive" Label="Good Resistances On Defensive Pokémon" />
                        </MudTooltip>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudStack>
                        <MudTooltip Text="Determines how important a good balance of moves is." Placement="Placement.Bottom" RootClass="mud-width-full">
                            <MudSlider @bind-Value="moveSetBalanceWeighting" Size="Size.Medium" Min="0" Max="1" Step="0.05">Balance Move Coverage</MudSlider>
                        </MudTooltip>
                        <MudTooltip Text="Determines how important a good balance of STAB coverage is." Placement="Placement.Bottom" RootClass="mud-width-full">
                            <MudSlider @bind-Value="stabBalanceWeighting" Size="Size.Medium" Min="0" Max="1" Step="0.05">Balance STAB Coverage</MudSlider>
                        </MudTooltip>
                        <MudTooltip Text="Determines how important a good balance of type resistances is." Placement="Placement.Bottom" RootClass="mud-width-full">
                            <MudSlider @bind-Value="resistanceBalanceWeighting" Size="Size.Medium" Min="0" Max="1" Step="0.05">Balance Resistances</MudSlider>
                        </MudTooltip>
                        <MudTooltip Text="Determines how important a good balance of type weakenesses is." Placement="Placement.Bottom" RootClass="mud-width-full">
                            <MudSlider @bind-Value="weaknessBalanceWeighting" Size="Size.Medium" Min="0" Max="1" Step="0.05">Balance Weaknesses</MudSlider>
                        </MudTooltip>
                    </MudStack>
                </MudItem>
                <MudItem xs="12">
                    <MudDivider DividerType="DividerType.FullWidth" Class="my-2"/>
                    <MudText Typo="Typo.h6">Stat Weightings</MudText>
                    <MudText Typo="Typo.subtitle1">Use the sliders to adjust the importance of different base statistics. The big slider determines the importance of base statistics compared to the other weighting options.</MudText>
                    <MudSlider @bind-Value="baseStatTotalWeighting" Size="Size.Large" Min="0" Max="1" Step="0.05"></MudSlider>
                    <MudGrid>
                        <MudItem xs="6" sm="4" md="2"><MudSlider @bind-Value="baseStatHpWeighting"    Size="Size.Small" Min="0" Max="1" Step="0.05">HP</MudSlider>           </MudItem>
                        <MudItem xs="6" sm="4" md="2"><MudSlider @bind-Value="baseStatAttWeighting"   Size="Size.Small" Min="0" Max="1" Step="0.05">Attack</MudSlider>       </MudItem>
                        <MudItem xs="6" sm="4" md="2"><MudSlider @bind-Value="baseStatDefWeighting"   Size="Size.Small" Min="0" Max="1" Step="0.05">Defense</MudSlider>      </MudItem>
                        <MudItem xs="6" sm="4" md="2"><MudSlider @bind-Value="baseStatSpAttWeighting" Size="Size.Small" Min="0" Max="1" Step="0.05">Sp. Attack</MudSlider>   </MudItem>
                        <MudItem xs="6" sm="4" md="2"><MudSlider @bind-Value="baseStatSpDefWeighting" Size="Size.Small" Min="0" Max="1" Step="0.05">Sp. Defense</MudSlider>  </MudItem>
                        <MudItem xs="6" sm="4" md="2"><MudSlider @bind-Value="baseStatSpeWeighting"   Size="Size.Small" Min="0" Max="1" Step="0.05">Speed</MudSlider>        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudStack Row="true">
                    @if (Generating)
                    {                    
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Stop" Color="Color.Error" OnClick="OnClickStop">Stop</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" OnClick="OnClickGenerate">Generate</MudButton>
                    }
                        <MudButton Disabled="Generating" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnClickReset">Reset</MudButton>
                    </MudStack>
                </MudItem>
                <MudItem xs="6" md="3">
                    <MudNumericField Disabled="Generating" @bind-Value="NumGenerations" Label="Generations" Variant="Variant.Text" Min="10" Max="200" Step="10"/>
                </MudItem>
                <MudItem xs="6" md="3">
                    <MudNumericField Disabled="Generating" @bind-Value="PopulationSize" Label="Population Size" Variant="Variant.Text" Min="50" Max="1000" Step="50" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudButton Disabled="@(Generating || BestTeam.IsEmpty)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Upload" Color="Color.Primary" OnClick="OnClickLoadIntoEditor">Load Into Editor</MudButton>
                </MudItem>
            </MudGrid>
            @*</MudStack>*@

            @if (Generating)
            {
                <MudProgressLinear Color="Color.Primary" Value="@ProgressValue" Size="Size.Medium" Max="@NumGenerations" />
            }

            <MudDivider DividerType="DividerType.FullWidth" />

            <MudGrid>
                <MudItem xs="12">
                    <MudGrid Justify="Justify.SpaceEvenly">
                        @for (int i = 0; i < PokemonTeam.MaxTeamSize; i++)
                        {
                            SmartPokemon? p = null;
                            bool locked = false;
                            if (LockedMembers is not null && LockedMembers.Pokemon[i] is not null)
                            {
                                p = LockedMembers.Pokemon[i];
                                locked = true;
                            }

                            if (!locked)
                                p = BestTeam.Pokemon[i];

                            @if (p is not null)
                            {
                                <MudItem xs="4" md="2">
                                    <MudPaper>
                                        @if (locked)
                                        {
                                            <MudIcon Class="ma-1" Icon="@Icons.Material.Filled.Lock" Color="Color.Primary" />
                                        }
                                        <PokemonCard Pokemon="p" />
                                    </MudPaper>
                                </MudItem>
                            }
                            else
                            {
                                <MudItem xs="4" md="2">
                                    <MudSkeleton Height="100px"></MudSkeleton>
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </MudItem>
                @if (!BestTeam.IsEmpty)
                {
                    <MudItem xs="12" >
                        <StatsTeamPanel Team="BestTeam" />
                    </MudItem>
                }
            </MudGrid>

        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public PokemonTeam? LockedMembers { get; set; }

    private PokemonTeamGeneticAlgorithm GA = new PokemonTeamGeneticAlgorithm();
    private PokemonTeam BestTeam = new PokemonTeam();

    private bool Generating = false;
    private int GenerationsRan { get; set; } = 0;
    private int ProgressValue { get; set; } = 0;

    private int NumGenerations = 50;
    private int PopulationSize = 250;

    private double? GABestChromFitness = 0;
    private double BestOverallFitness = 0;

    public Dictionary<string, bool> typeWeightings = [];

    public bool resistantAll = true;
    public bool stabCoverageAll = true;
    public bool coverageOnOffensive = true;
    public bool resistancesOnDefensive = true;

    public double moveSetBalanceWeighting = 0.0;
    public double stabBalanceWeighting = 1.0;
    public double resistanceBalanceWeighting = 1.0;
    public double weaknessBalanceWeighting = 0.5;

    // base stats
    public double baseStatTotalWeighting = 0.75;
    public double baseStatHpWeighting = 0.5;
    public double baseStatAttWeighting = 0.5;
    public double baseStatDefWeighting = 0.5;
    public double baseStatSpAttWeighting = 0.5;
    public double baseStatSpDefWeighting = 0.5;
    public double baseStatSpeWeighting = 0.5;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // set generation ran callback event
            GA.GenerationRan += HandleGenerationRan;

            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        // initialise type weightings list
        foreach (string t in Globals.AllTypes)
        {
            if (t == "normal")
                typeWeightings[t] = false;
            else
                typeWeightings[t] = true;
        }
        base.OnParametersSet();
    }

    public void OnClickType(string typeName)
    {
        typeWeightings[typeName] = !typeWeightings[typeName];
        StateHasChanged();
    }

    public void OnClickGenerate()
    {
        Generating = true;
        GenerationsRan = 0;
        ProgressValue = 0;
        BestOverallFitness = 0;

        AutoBuilderWeightings weightings = new AutoBuilderWeightings(
            resistantAll
            , stabCoverageAll
            , coverageOnOffensive
            , resistancesOnDefensive

            , moveSetBalanceWeighting
            , stabBalanceWeighting
            , resistanceBalanceWeighting
            , weaknessBalanceWeighting

            , baseStatTotalWeighting
            , baseStatHpWeighting
            , baseStatAttWeighting
            , baseStatDefWeighting
            , baseStatSpAttWeighting
            , baseStatSpDefWeighting
            , baseStatSpeWeighting
            
            , typeWeightings);

        GA.Initialize(PopulationSize, Profile.PokemonStorage, LockedMembers is null ? new PokemonTeam() : LockedMembers, weightings);
        GA.Run();

        StateHasChanged();
    }

    public void OnClickStop()
    {
        GA.Stop();

        Generating = false;
        StateHasChanged();
    }

    public void OnClickReset()
    {
        BestTeam = new PokemonTeam();
        StateHasChanged();
    }

    public async Task OnClickLoadIntoEditor()
    {
        await Session.SetTeamAsync(BestTeam);
        MudDialog!.Close(DialogResult.Ok(true));
    }

    // called after each generation is completed
    void HandleGenerationRan()
    {
        if (GA.BestChromosome is null)
            return;

        PokemonTeam GeneratedTeam = GA.BestChromosome.GetTeam();
        GABestChromFitness = GA.BestChromosome.Fitness;        

        if (GABestChromFitness > BestOverallFitness)
        {
            BestTeam = GeneratedTeam;
            BestOverallFitness = (double)GABestChromFitness;
        }

        GenerationsRan++;

        if (GenerationsRan % 5 == 0)
        {
            ProgressValue = GenerationsRan;
            if (ProgressValue >= NumGenerations)
            {
                OnClickStop();
            }
        }

        StateHasChanged();
    }

    void Submit() 
    {
        GA.Stop();
        MudDialog!.Close(DialogResult.Ok(true)); 
    }
    void Cancel() 
    { 
        GA.Stop();
        MudDialog!.Cancel(); 
    }
}
