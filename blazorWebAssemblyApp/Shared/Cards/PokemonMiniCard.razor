@inject ProfileService ProfileService
@inject IDialogService DialogService

<MudTooltip Text="@Pokemon!.Name">
	<MudPaper Class="ma-1 pa-1 cursor-pointer" Style="background: var(--mud-palette-surface)" @onclick="OnClickCard">
		<MudImage Src="@Pokemon!.Sprites.FrontDefault" Style="width: 50px;" />
	</MudPaper>
</MudTooltip>

@code {
	[Parameter]
	public SmartPokemon? Pokemon { get; set; }

	[Parameter] // used for telling the parent of the card that it has updated
	public EventCallback OnUpdated { get; set; }

	public override Task SetParametersAsync(ParameterView parameters)
	{
		parameters.SetParameterProperties(this);
		if (Pokemon == null)
			throw new InvalidOperationException($"{nameof(PokemonMiniCard)} requires a {nameof(SmartPokemon)} parameter.");

		return base.SetParametersAsync(ParameterView.Empty);
	}

	private async Task Update()
	{
		await ProfileService.UpdatePokemonStorageAsync();
		await OnUpdated.InvokeAsync();
	}

	// opens a dialog with Pokemon details
	public void OnClickCard()
	{
		var parameters = new DialogParameters();
		parameters.Add("Pokemon", Pokemon);

		DialogService.Show<PokemonDetailsDialog>(StringUtils.FirstCharToUpper(Pokemon!.Name), parameters);
	}
}
